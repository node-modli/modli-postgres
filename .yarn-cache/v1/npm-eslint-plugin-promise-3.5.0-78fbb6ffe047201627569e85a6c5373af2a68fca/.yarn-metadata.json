{
  "manifest": {
    "name": "eslint-plugin-promise",
    "version": "3.5.0",
    "description": "Enforce best practices for JavaScript promises",
    "keywords": [
      "eslint",
      "eslintplugin",
      "eslint-plugin",
      "promise",
      "promises"
    ],
    "author": {
      "name": "jden",
      "email": "jason@denizac.org"
    },
    "repository": {
      "type": "git",
      "url": "git@github.com:xjamundx/eslint-plugin-promise.git"
    },
    "scripts": {
      "pretest": "standard",
      "test": "mocha test"
    },
    "devDependencies": {
      "eslint": "^3.0",
      "mocha": "^2.3.4",
      "standard": "^7.1.2"
    },
    "engines": {
      "node": ">=4"
    },
    "license": "ISC",
    "_registry": "npm",
    "_loc": ".yarn-cache/v1/npm-eslint-plugin-promise-3.5.0-78fbb6ffe047201627569e85a6c5373af2a68fca/package.json",
    "readmeFilename": "README.md",
    "readme": "# eslint-plugin-promise\n\nEnforce best practices for JavaScript promises.\n\n [![js-standard-style](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard)\n [![travis-ci](https://travis-ci.org/xjamundx/eslint-plugin-promise.svg)](https://travis-ci.org/xjamundx/eslint-plugin-promise)\n[![npm version](https://badge.fury.io/js/eslint-plugin-promise.svg)](https://www.npmjs.com/package/eslint-plugin-promise)\n\n\n## Installation\n\nYou'll first need to install [ESLint](http://eslint.org):\n\n```\n$ npm i eslint --save-dev\n```\n\nNext, install `eslint-plugin-promise`:\n\n```\n$ npm install eslint-plugin-promise --save-dev\n```\n\n**Note:** If you installed ESLint globally (using the `-g` flag) then you must also install `eslint-plugin-promise` globally.\n\n## Usage\n\nAdd `promise` to the plugins section of your `.eslintrc` configuration file. You can omit the `eslint-plugin-` prefix:\n\n```json\n{\n    \"plugins\": [\n        \"promise\"\n    ]\n}\n```\n\n\nThen configure the rules you want to use under the rules section.\n\n```json\n{\n    \"rules\": {\n        \"promise/always-return\": \"error\",\n        \"promise/no-return-wrap\": \"error\",\n        \"promise/param-names\": \"error\",\n        \"promise/catch-or-return\": \"error\",\n        \"promise/no-native\": \"off\",\n        \"promise/no-nesting\": \"warn\",\n        \"promise/no-promise-in-callback\": \"warn\",\n        \"promise/no-callback-in-promise\": \"warn\",\n        \"promise/avoid-new\": \"warn\"\n    }\n}\n```\n\nor start with the recommended rule set\n\n```json\n{\n    \"extends\": [\n        \"plugin:promise/recommended\"\n    ]\n}\n```\n\n## Rules\n\n### Promise Rules\n\n| recommended | rule                        | description                                                                      |\n| ----------- | --------------------------- | -------------------------------------------------------------------------------- |\n| :bangbang:  | `catch-or-return`           | Enforces the use of `catch` on un-returned promises.                             |\n| :bangbang:  | `no-return-wrap`            | Avoid wrapping values in `Promise.resolve` or `Promise.reject` when not needed.  |\n| :bangbang:  | `param-names`               | Enforce consistent param names when creating new promises.                       |\n| :bangbang:  | `always-return`             | Return inside each `then` to create readable and reusable Promise chains.        |\n|             | `no-native`                 | In an ES5 environment, make sure to create a `Promise` constructor before using. |\n| :warning:   | `no-nesting`                | Avoid nested .then() or .catch() statements                                      |\n| :warning:   | `no-promise-in-callback`    | Avoid using promises inside of callbacks                                         |\n| :warning:   | `no-callback-in-promise`    | Avoid calling `cb()` inside of a `then()` (use [nodeify][]] instead)             |\n| :warning:   | `avoid-new`                 | Avoid creating `new` promises outside of utility libs (use [pify][] instead)     |\n| :seven:     | `prefer-await-to-then`      | Prefer `await` to `then()` for reading Promise values                            |\n| :seven:     | `prefer-await-to-callbacks` | Prefer async/await to the callback pattern                                       |\n\n**Key**\n\n| icon       | description                                     |\n| ---------- | ----------------------------------------------- |\n| :bangbang: | Reports as error in recommended configuration   |\n| :warning:  | Reports as warning in recommended configuration |\n| :seven:    | ES2017 Async Await rules                        |\n\n[nodeify]: https://www.npmjs.com/package/nodeify\n[pify]: https://www.npmjs.com/package/pify\n\n### Rule: `catch-or-return`\n\nEnsure that each time a `then()` is applied to a promise, a\n`catch()` is applied as well. Exceptions are made if you are\nreturning that promise.\n\n#### Valid\n\n```js\nmyPromise.then(doSomething).catch(errors);\nmyPromise.then(doSomething).then(doSomethingElse).catch(errors);\nfunction doSomethingElse() { return myPromise.then(doSomething) }\n```\n\n#### Invalid\n\n```js\nmyPromise.then(doSomething);\nmyPromise.then(doSomething, catchErrors); // catch() may be a little better\nfunction doSomethingElse() { myPromise.then(doSomething) }\n```\n\n#### Options\n\n#### `allowThen`\n\nYou can pass an `{ allowThen: true }` as an option to this rule\n to allow for `.then(null, fn)` to be used instead of `catch()` at\n the end of the promise chain.\n\n#### `terminationMethod`\n\nYou can pass a `{ terminationMethod: 'done' }` as an option to this rule\n to require `done()` instead of `catch()` at the end of the promise chain.\n This is useful for many non-standard Promise implementations.\n\nYou can also pass an array of methods such as\n `{ terminationMethod: ['catch',  'asCallback', 'finally'] }`.\n\n This will allow any of\n```js\nPromise.resolve(1).then(() => { throw new Error('oops') }).catch(logerror)\nPromise.resolve(1).then(() => { throw new Error('oops') }).asCallback(cb)\nPromise.resolve(1).then(() => { throw new Error('oops') }).finally(cleanUp)\n```\n\n### Rule: `always-return`\n\nEnsure that inside a `then()` you make sure to `return` a new promise or value.\nSee http://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html (rule #5)\nfor more info on why that's a good idea.\n\nWe also allow someone to `throw` inside a `then()` which is essentially the same as `return Promise.reject()`.\n\n#### Valid\n\n```js\nmyPromise.then((val) => val * 2));\nmyPromise.then(function(val) { return val * 2; });\nmyPromise.then(doSomething); // could be either\nmyPromise.then((b) => { if (b) { return \"yes\" } else { return \"no\" } });\n```\n\n#### Invalid\n\n```js\nmyPromise.then(function(val) {});\nmyPromise.then(() => { doSomething(); });\nmyPromise.then((b) => { if (b) { return \"yes\" } else { forgotToReturn(); } });\n```\n\n### `param-names`\n\nEnforce standard parameter names for Promise constructors\n\n#### Valid\n```js\nnew Promise(function (resolve) { ... })\nnew Promise(function (resolve, reject) { ... })\n```\n\n#### Invalid\n```js\nnew Promise(function (reject, resolve) { ... }) // incorrect order\nnew Promise(function (ok, fail) { ... }) // non-standard parameter names\n```\n\nEnsures that `new Promise()` is instantiated with the parameter names `resolve, reject` to avoid confusion with order such as `reject, resolve`. The Promise constructor uses the [RevealingConstructor pattern](https://blog.domenic.me/the-revealing-constructor-pattern/). Using the same parameter names as the language specification makes code more uniform and easier to understand.\n\n### `no-native`\n\nEnsure that `Promise` is included fresh in each file instead of relying\n on the existence of a native promise implementation. Helpful if you want\n to use `bluebird` or if you don't intend to use an ES6 Promise shim.\n\n\n#### Valid\n```js\nvar Promise = require(\"bluebird\");\nvar x = Promise.resolve(\"good\");\n```\n\n#### Invalid\n```js\nvar x = Promise.resolve(\"bad\");\n```\n\n### Rule: `no-return-wrap`\n\nEnsure that inside a `then()` or a `catch()` we always `return`\n or `throw` a raw value instead of wrapping in `Promise.resolve`\n or `Promise.reject`\n\n#### Valid\n```js\nmyPromise.then(function(val) {\n  return val * 2;\n});\nmyPromise.then(function(val) {\n  throw \"bad thing\";\n});\n```\n\n#### Invalid\n```js\nmyPromise.then(function(val) {\n  return Promise.resolve(val * 2);\n});\nmyPromise.then(function(val) {\n  return Promise.reject(\"bad thing\");\n})\n```\n\n## Etc\n- (c) MMXV jden <jason@denizac.org> - ISC license.\n- (c) 2016 Jamund Ferguson <jamund@gmail.com> - ISC license.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/eslint-plugin-promise/-/eslint-plugin-promise-3.5.0.tgz#78fbb6ffe047201627569e85a6c5373af2a68fca",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/eslint-plugin-promise/-/eslint-plugin-promise-3.5.0.tgz",
    "hash": "78fbb6ffe047201627569e85a6c5373af2a68fca",
    "registry": "npm",
    "packageName": "eslint-plugin-promise"
  },
  "registry": "npm",
  "hash": "78fbb6ffe047201627569e85a6c5373af2a68fca"
}
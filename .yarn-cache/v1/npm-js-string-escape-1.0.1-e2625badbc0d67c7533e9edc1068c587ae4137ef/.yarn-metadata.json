{
  "manifest": {
    "name": "js-string-escape",
    "version": "1.0.1",
    "description": "Escape strings for use as JavaScript string literals",
    "main": "index.js",
    "scripts": {
      "test": "tap test"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/joliss/js-string-escape"
    },
    "keywords": [
      "string",
      "escape",
      "backslash",
      "javascript",
      "ecmascript"
    ],
    "author": {
      "name": "Jo Liss",
      "email": "joliss42@gmail.com"
    },
    "contributors": [
      {
        "name": "Mathias Bynens",
        "url": "http://mathiasbynens.be/"
      }
    ],
    "license": "MIT",
    "devDependencies": {
      "tap": "~> 0.4.2",
      "punycode": "~> 1.2.1"
    },
    "engines": {
      "node": ">= 0.8"
    },
    "files": [
      "index.js"
    ],
    "_registry": "npm",
    "_loc": ".yarn-cache/v1/npm-js-string-escape-1.0.1-e2625badbc0d67c7533e9edc1068c587ae4137ef/package.json",
    "readmeFilename": "README.md",
    "readme": "# js-string-escape\n\n[![Build Status](https://travis-ci.org/joliss/js-string-escape.png?branch=master)](https://travis-ci.org/joliss/js-string-escape)\n\nEscape any string to be a valid JavaScript string literal between double\nquotes or single quotes.\n\n## Installation\n\n```\nnpm install js-string-escape\n```\n\n## Example\n\nIf you need to generate JavaScript output, this library will help you safely\nput arbitrary data in JavaScript strings:\n\n```js\njsStringEscape = require('js-string-escape')\n\nconsole.log('\"' + jsStringEscape('Quotes (\\\", \\'), newlines (\\n), etc.') + '\"')\n// => \"Quotes (\\\", \\'), newlines (\\n), etc.\"\n```\n\nIn other words, given any string `s`, the following invariants hold:\n\n```js\neval('\"' + jsStringEscape(s) + '\"') === s\neval(\"'\" + jsStringEscape(s) + \"'\") === s\n```\n\nThese `eval` expressions are safe with untrusted strings `s`.\n\nNon-strings will be cast to strings.\n\n## Compliance\n\nThis library has been checked against [ECMAScript\n5.1](http://www.ecma-international.org/ecma-262/5.1/#sec-7.8.4) and tested\nagainst all Unicode code points.\n\nNote that the returned string is not necessarily valid JSON, since JSON\ndisallows control characters, and `\\'` is illegal in JSON.\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2013 Jo Liss\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/js-string-escape/-/js-string-escape-1.0.1.tgz#e2625badbc0d67c7533e9edc1068c587ae4137ef",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/js-string-escape/-/js-string-escape-1.0.1.tgz",
    "hash": "e2625badbc0d67c7533e9edc1068c587ae4137ef",
    "registry": "npm",
    "packageName": "js-string-escape"
  },
  "registry": "npm",
  "hash": "e2625badbc0d67c7533e9edc1068c587ae4137ef"
}